# ------------------------------------
#   欢迎您使用阿里云函数计算 fc3 组件进行项目开发
#   组件仓库地址：https://github.com/devsapp/fc3
#   组件帮助文档：https://manual.serverless-devs.com/user-guide/aliyun/#fc3
#   Yaml参考文档：https://manual.serverless-devs.com/user-guide/aliyun/fc3/spec/
#   关于Serverless Devs和FC组件的关系、如何声明/部署多个函数等问题，可以参考文档：https://manual.serverless-devs.com/user-guide/tips/
#   关于如何做CICD等问题，可以参考：https://manual.serverless-devs.com/user-guide/cicd/
#   关于如何进行环境划分等问题，可以参考：https://docs.serverless-devs.com/practices/multi-env/
#   更多函数计算案例，可参考：https://github.com/devsapp/awesome/
#   有问题快来钉钉群问一下吧：33947367
# ------------------------------------
edition: 3.0.0
name: hello-world-app
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://docs.serverless-devs.com/user-guide/builtin/config/
# 密钥使用顺序可以参考：https://docs.serverless-devs.com/dev-guide/cli_design/#_11
access: "{{ access }}"

vars: # 全局变量
  region: "{{ region }}"
  functionName: "{{ functionName }}"

resources:
  inspector_server:
    # 如果只想针对 hello_world 下面的业务进行相关操作，可以在命令行中加上 hello_world，例如：
    # 只对 hello_world 进行构建：s hello_world build
    # 如果不带有 hello_world ，而是直接执行 s build，工具则会对当前Yaml下，所有和 hello_world 平级的业务模块（如有其他平级的模块，例如下面注释的next_function），按照一定顺序进行 build 操作
    component: fc3 # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:
      pre-deploy:
        - run: export PATH=/usr/local/versions/node/v20.8.1/bin:$PATH && npm install && npm run build
          path: ./code
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://docs.serverless-devs.com/user-guide/spec/#_3
      functionName: '${vars.functionName}-server'
      description: "MCP inspector proxy server"
      runtime: "custom.debian10"
      code: ./code
      timeout: 300
      cpu: 0.5
      memorySize: 512
      diskSize: 512
      environmentVariables:
        PATH: >-
          /var/fc/lang/nodejs20/bin:/opt/nodejs20/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      customRuntimeConfig:
        port: 3000
        command:
          - npm
          - run
          - start-server
      instanceConcurrency: 200
      concurrencyConfig:
        reservedConcurrency: 1
      triggers:
        - triggerName: httpTrigger
          triggerType: http
          triggerConfig:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - OPTIONS
  inspector_client:
    # 如果只想针对 hello_world 下面的业务进行相关操作，可以在命令行中加上 hello_world，例如：
    # 只对 hello_world 进行构建：s hello_world build
    # 如果不带有 hello_world ，而是直接执行 s build，工具则会对当前Yaml下，所有和 hello_world 平级的业务模块（如有其他平级的模块，例如下面注释的next_function），按照一定顺序进行 build 操作
    component: fc3 # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:
      pre-deploy:
        - run: export PATH=/usr/local/versions/node/v20.8.1/bin:$PATH && export VITE_SERVER_URL=${resources.inspector_server.info.url.system_url} && npm install && npm run build
          path: ./code
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://docs.serverless-devs.com/user-guide/spec/#_3
      functionName: '${vars.functionName}-client'
      description: "MCP inspector web page"
      runtime: "custom.debian10"
      code: ./code
      timeout: 300
      cpu: 0.5
      memorySize: 512
      diskSize: 512
      environmentVariables:
        VITE_SERVER_URL: ${resources.inspector_server.info.url.system_url}
        PATH: >-
          /var/fc/lang/nodejs20/bin:/opt/nodejs20/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      customRuntimeConfig:
        port: 5173
        command:
          - npm
          - run
          - start-client
      customDomain:
        protocol: "HTTP"
        route:
          path: "/*"
          qualifier: "LATEST"
        domainName: auto
      triggers:
        - triggerName: httpTrigger
          triggerType: http
          triggerConfig:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - OPTIONS
